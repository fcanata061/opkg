#!/bin/bash
set -euo pipefail

CONFIG_FILE="/etc/opkg.conf"
[ -f "$CONFIG_FILE" ] || { echo "Configuração não encontrada em $CONFIG_FILE"; exit 1; }
source "$CONFIG_FILE"

mkdir -p "$WORK" "$PKG" "$BIN" "$SOURCES" "$PKGOUT" "$LOGDB"

C_RESET="\033[0m"
C_RED="\033[31m"
C_GREEN="\033[32m"
C_BLUE="\033[34m"
C_YELLOW="\033[33m"

log() { echo -e "${C_BLUE}[opkg]${C_RESET} $*"; }
warn() { echo -e "${C_YELLOW}[aviso]${C_RESET} $*"; }
err() { echo -e "${C_RED}[erro]${C_RESET} $*" >&2; exit 1; }

spinner() {
    local pid=$!
    local spin='|/-\'
    while kill -0 $pid 2>/dev/null; do
        for i in {0..3}; do
            echo -ne "\r${C_GREEN}[...]"${C_RESET}" ${spin:$i:1}"
            sleep 0.1
        done
    done
    echo -ne "\r"
}

# ---------- Topological sort de dependências ----------
resolve_order() {
    declare -A edges visited temp result
    local recipes=("$@")

    # Construir arestas do grafo
    for r in "${recipes[@]}"; do
        [ -f "$r" ] || continue
        source "$r"
        local pkg="$NAME"
        for dep in ${DEPENDS:-}; do
            edges["$dep"]+="$pkg "
        done
    done

    topo_visit() {
        local node="$1"
        if [ "${temp[$node]:-}" == 1 ]; then
            err "Dependência circular detectada em $node"
        fi
        [ "${visited[$node]:-}" == 1 ] && return
        temp["$node"]=1
        for dep in ${edges[$node]:-}; do
            topo_visit "$dep"
        done
        temp["$node"]=0
        visited["$node"]=1
        result+=("$node")
    }

    for r in "${recipes[@]}"; do
        source "$r"
        topo_visit "$NAME"
    done

    echo "${result[@]}"
}

# ---------- Função rebuild atualizada ----------
cmd_rebuild_world() {
    log "Recompilando todo o sistema na ordem de dependências..."
    local recipes=($(ls recipes/*.recipe))
    local order
    order=($(resolve_order "${recipes[@]}"))

    log "Ordem de compilação: ${order[*]}"
    for pkg in "${order[@]}"; do
        local recipe="recipes/$pkg.recipe"
        if [ -f "$recipe" ]; then
            log "Recompilando $pkg"
            ./opkg.sh upgrade "$recipe"
        else
            warn "Receita não encontrada para $pkg, pulando"
        fi
    done
}

# ---------- Dispatcher atualizado ----------
case "${1:-}" in
    rebuild) cmd_rebuild_world ;;
    # ... os outros comandos permanecem iguais ...
    install)
    shift
    [ -z "${1:-}" ] && err "Informe a receita"
    log "Instalando pacote com resolução de dependências: $1"
    prepare "$1"        # Baixa e extrai fontes + aplica patches
    install_pkg "$1"    # Instala com dependências recursivas ;;
    help|-h|--help)
        cat <<EOF
${C_GREEN}opkg - Gerenciador de Pacotes Minimalista${C_RESET}

Uso:
  $0 <comando> [args]

Comandos:
  rebuild               Recompila todo o sistema na ordem correta de dependências
  upgrade <receita>     Atualiza pacote para nova versão
  search <nome>         Busca programa no repositório local
  info <nome>           Mostra informações detalhadas do pacote
  orphans               Remove pacotes órfãos
  strip                 Executa strip em todos os binários (se habilitado)
  sha256sum <pkg.tar.xz>  Gera checksum SHA256
  verify <pkg.tar.xz>   Verifica checksum SHA256
  help                  Mostra esta ajuda
EOF
        ;;
    *)
        err "Comando inválido. Use '$0 help'"
        ;;
esac
